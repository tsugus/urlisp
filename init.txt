;;;; For "UrLISP", which is a minimum interpreter of pure LISP ;;;;

(def list '(lambda x x))

; ==> ((list lambda x x))
(exportenv)

; ==> (a b c)
(list 'a 'b 'c)

(importenv '((x . a) (y . b)))

; ==> ((x . a) (y . b))
(exportenv)

; ==> a
x
; ==> b
y
; ==> Unknown identifier. At list
list
; ==> Unknown identifier. At list
(list 'a 'b 'c)

(importenv
  (cons
    (cons 'list '(lambda x x))
    (exportenv)))

; ==> ((list lambda x x) (x . a) (y . b))
(exportenv)

; ==> a
x
; == b
; ==> (lambda x x)
list
; ==> (a b c)
(list 'a 'b 'c)

; Usage of "label"
(def reverse
  '(lambda (x)
    ((label rev-append
      (lambda (x y)
        (cond ((eq '() x) y)
              (t (rev-append (cdr x) (cons (car x) y))))))
    x '())))

; ==> (e d c b a)
(reverse '(a b c d e))

; False is the empty list.
; ==> ()
(eq 'a 'b)
; ==> t
(eq 'a 'a)

; "Super Brakets" '[' and ']'
; ==> (d)
(cdr (cdr (cdr '(a b c d]
; ==> (x (x y))
(cons [car (cdr '(p x y] [list (cdr '(p x y]]
; ==> (a (b (c)))
; "Unexpected character." is displayed, but it is not a problem.
; This is because it is actually converted as follows.
; ==> (quote (a (b (c])
'(a (b (c]

; Initializing of the environment list
(importenv '())

; Gabage Collection
(gc)

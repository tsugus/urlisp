;;;;; An Initial Program for "UrLISP" ;;;;;;
;; Version 0.1.1
;; (C) 2025 Tsugu
;;;;;

; -------------------------------------
;; System Categories:
;  Dynamic Scope, Lisp-1

;; Supported Functions & Special Forms:
;  quote, atom, eq, car, cdr, cons, cond, eval, apply,
;  label, lambda

;; Unique Functions:
;  importenv, exportenv, def, cls, quit

; -------------------------------------
;; Usage

; "Super Brakets" '[' and ']'
'(a (b (c]          ; ==> (a (b (c)))
'(a [b (c] [b (c])  ; ==> (a (b (c)) (b (c)))

; 'importenv', 'exportenv'
(exportenv)             ; ==> ()
(importenv '((x . a)))  ; ==> ((x . a))
(exportenv)             ; ==> ((x . a))
x                       ; ==> a

; 'def'
(def y 'b)   ; ==> y
(exportenv)  ; ==> ((y . b) (x . a))
x            ; ==> a
y            ; ==> b

; Truth, False
(eq 'a 'a)  ; ==> t
(eq 'a 'b)  ; ==> ()

; Gabage Collection
(gc)

; Initializing of the environment list
(importenv '())

; Screen Clear
; (cls)

; Exit UrLISP
; (quit)

; -------------------------------------
; Functions of Puseud Numbers (inefficient!)

(def +1
  '(lambda (x) (cons 't x)))

(def -1
  '(lambda (x)
     (cond ((eq #0 x) '())
           (t (cdr x)))))

(def +
  '(lambda (x y)
     (cond ((eq #0 y) x)
           (t (+ (+1 x) (-1 y))))))

(def *
  '(lambda (x y)
     ((label *rec
             (lambda (x y acc)
               (cond ((eq #0 y) acc)
                     (t (*rec x (-1 y) (+ acc x))))))
      x y '())))

(def -
  '(lambda (x y)
     (cond ((eq #0 y) x)
           (t (- (-1 x) (-1 y))))))

(def |-|
  '(lambda (x y)
     (+ (- x y) (- y x))))

(def =
  '(lambda (x y)
     (eq #0 (|-| x y))))

(def <
  '(lambda (x y)
     (cond ((- y x) 't))))

(def >
  '(lambda (x y)
     (cond ((- x y) 't))))

(def /
  '(lambda (x y)
     ((label /rec
             (lambda (x y acc)
               (cond ((< x y) acc)
                     (t (/rec (- x y) y (+1 acc))))))
      x y '())))

(def %
  '(lambda (x y)
     (cond ((< x y) x)
           ((= x y) #0)
           (t (% (- x y) y)))))

(def fibo
  '(lambda (n)
     ((label fibo-rec
             (lambda (n pre sum)
               (cond
                 ((eq #0 n) sum)
                 (t (fibo-rec (-1 n) sum (+ pre sum))))))
      n #1 #0)))

; =====================================
;; Meta-circular Evaluator

; The meta-circular pure LISP program 'plisp'
;
(def plisp
'(
  (caar . (lambda (x) (car (car x))))
  (cadr . (lambda (x) (car (cdr x))))
  (cdar . (lambda (x) (cdr (car x))))
  (cddr . (lambda (x) (cdr (cdr x))))
  (caaar . (lambda (x) (car (caar x))))
  (caadr . (lambda (x) (car (cadr x))))
  (cadar . (lambda (x) (car (cdar x))))
  (caddr . (lambda (x) (car (cddr x))))
  (cdaar . (lambda (x) (cdr (caar x))))
  (cdadr . (lambda (x) (cdr (cadr x))))
  (cddar . (lambda (x) (cdr (cdar x))))
  (cdddr . (lambda (x) (cdr (cddr x))))
  (caddar . (lambda (x) (car (cddar x))))
  (list
   . (lambda x x))
  (null
   . (lambda (x) (eq x '())))
  (not
   . (lambda (x) (cond (x '())
                      (t 't))))
  (and
   . (lambda (x y)
       (cond ((null x) '())
             (t (cond (y 't)
                      (t '()))))))
  (or
   . (lambda (x y)
       (cond (x 't)
             (t (cond ((null y) '())
                      (t 't))))))
  (rev-append
   . (lambda (x y)
       (cond ((null x) y)
             (t (rev-append (cdr x) (cons (car x) y))))))
  (reverse
   . (lambda (x) (rev-append x '())))
  (append
   . (lambda (x y) (rev-append (rev-append x '()) y)))
  (assoclist
   . (lambda (keys values)
       (cond ((or (null keys) (null values)) '())
             ((and (not (atom keys)) (not (atom values)))
              (cons (cons (car keys) (car values))
                    (assoclist (cdr keys) (cdr values))))
             ((not (null keys))
              (list (cons keys values))))))
  (assoc
   . (lambda (key lst)
       (cond ((null lst) '())
             ((eq key (caar lst)) (cdar lst))
             (t (assoc key (cdr lst))))))
  (isSUBR
   . (lambda (x)
       (cond ((eq x 'atom) 't)
             ((eq x 'eq) 't)
             ((eq x 'car) 't)
             ((eq x 'cdr) 't)
             ((eq x 'cons) 't)
             (t '()))))
  (evcond
   . (lambda (clauses env)
       (cond ((null clauses) '())
             ((null (eval* (caar clauses) env))
              (evcond (cdr clauses) env))
             (t (eval* (cadar clauses) env)))))
  (evlist
   . (lambda (members env)
       (cond ((null members) '())
             (t (cons (eval* (car members) env)
                      (evlist (cdr members) env))))))
  (apply*
   . (lambda (func args env)
       (cond
         ((and (atom func) (not (null func)))
          (cond
            ((eq func 'quote) (car args))
            ((eq func 'atom)  (cond ((atom (car args)) 't)
                                    (t '())))
            ((eq func 'eq)    (cond
                                ((eq (car args) (cadr args)) 't)
                                (t '())))
            ((eq func 'car)   (car (car args)))
            ((eq func 'cdr)   (cdr (car args)))
            ((eq func 'cons)  (cons (car args) (cadr args)))
            ((eq func 'cond)  (evcond args env))
            (t (eval* (cons (assoc func env) args) env))))
         ((eq (car func) 'label)
          (eval* (cons (caddr func) args)
                 (cons (cons (cadr func) (caddr func)) env)))
         ((eq (car func) 'lambda)
          (eval* (caddr func)
                 (append (assoclist (cadr func) (evlist args env))
                         env))))))
  (eval*
   . (lambda (exp env)
       (cond
         ((eq exp 't) 't)
         ((eq exp '()) '())
         ((atom exp) (assoc exp env))
         ((isSUBR (car exp))
          (apply* (car exp) (evlist (cdr exp) env) env))
         (t
          (apply* (car exp) (cdr exp) env)))))
))

; =====================================
;; Test 1
'Tese_1

'Number_Test
'0 #0  '1 #1  '2 #2  '3 #3  '4 #4  '5 #5

'365_/_12_=_30
#=(/ #365 #12)

'365_%_12_=_5
#=(% #365 #12)

(gc)
'fibo_Test
#=(fibo #0)
#=(fibo #1)
#=(fibo #2)
#=(fibo #3)
#=(fibo #4)
#=(fibo #5)
#=(fibo #6)
#=(fibo #7)
#=(fibo #8)
#=(fibo #9)
#=(fibo #10)
#=(fibo #11)
#=(fibo #12)
#=(fibo #13)

; -------------------------------------
;; Test 2
'Test_2

; 'reverse2' defined on 'plisp'
;
(def plisp (cons (cons
 'reverse2
 '(lambda (x)
    ((label
      rec
      (lambda (x y)
        (cond ((null x) y)
              (t (rec (cdr x) (cons (car x) y))))))
     x '())))
plisp))

; Self-embeding
;
(def plisp (cons (cons 'plisp plisp) plisp))

'Test_of_eval*_&_reverse2
(eval
 '(eval*
   '(reverse2 '(1 2 3 4 5))
   plisp)
 plisp)

; Cancellation of two "(def plisp ...)"s
; However, it displays 't' instead of the loaded environment list.
;
(cond ((importenv (cdr (cdr (exportenv)))) 't))

(gc)

; -------------------------------------

;;;;; An Initial Program for "UrLISP" ;;;;;;
;; Version 0.0.6
;; (C) 2025 Tsugu
;;;;;

; -------------------------------------
;; System Categories:
;  Dynamic Scope, Lisp-1

;; Supported Functions & Special Forms:
;  quote, atom, eq, car, cdr, cons, cond, eval, apply,
;  label, lambda

;; Unique Functions:
;  importenv, exportenv, def

; -------------------------------------
;; Usage

; "Super Brakets" '[' and ']'
'(a (b (c]          ; ==> (a (b (c)))
'(a [b (c] [b (c])  ; ==> (a (b (c)) (b (c)))

; 'importenv', 'exportenv'
(exportenv)             ; ==> ()
(importenv '((x . a)))  ; ==> ((x . a))
(exportenv)             ; ==> ((x . a))
x                       ; ==> a

; 'def'
(def y 'b)   ; ==> y
(exportenv)  ; ==> ((y . b) (x . a))
x            ; ==> a
y            ; ==> b

; Truth, False
(eq 'a 'a)  ; ==> t
(eq 'a 'b)  ; ==> ()

; Gabage Collection
(gc)

; Initializing of the environment list
(importenv '())

; =====================================
;; Meta-circular Evaluator

; The meta-circular pure LISP program 'plisp'
;
(def plisp
'(
  (caar . (lambda (x) (car (car x))))
  (cadr . (lambda (x) (car (cdr x))))
  (cdar . (lambda (x) (cdr (car x))))
  (cddr . (lambda (x) (cdr (cdr x))))
  (caaar . (lambda (x) (car (caar x))))
  (caadr . (lambda (x) (car (cadr x))))
  (cadar . (lambda (x) (car (cdar x))))
  (caddr . (lambda (x) (car (cddr x))))
  (cdaar . (lambda (x) (cdr (caar x))))
  (cdadr . (lambda (x) (cdr (cadr x))))
  (cddar . (lambda (x) (cdr (cdar x))))
  (cdddr . (lambda (x) (cdr (cddr x))))
  (caddar . (lambda (x) (car (cddar x))))
  (null
   .(lambda (x) (eq x '())))
  (not
   .(lambda (x) (cond (x '())
                      (t 't))))
  (and
   . (lambda (x y)
       (cond ((null x) '())
             (t (cond (y 't)
                      (t '()))))))
  (or
   . (lambda (x y)
       (cond (x 't)
             (t (cond ((null y) '())
                      (t 't))))))
  (rev-append
   . (lambda (l m)
       (cond ((null l) m)
             (t (rev-append (cdr l) (cons (car l) m))))))
  (reverse
   . (lambda (l) (rev-append l '())))
  (append
   . (lambda (l m) (rev-append (rev-append l '()) m)))
  (assoclist
   . (lambda (keys values)
       (cond ((or (null keys) (null values)) '())
             ((and (not (atom keys)) (not (atom values)))
              (cons (cons (car keys) (car values))
                    (assoclist (cdr keys) (cdr values))))
             ((not (null keys))
              ((lambda x x) (cons keys values))))))
  (assoc
   . (lambda (key lst)
       (cond ((null lst) '())
             ((eq key (caar lst)) (cdar lst))
             (t (assoc key (cdr lst))))))
  (isSUBR
   . (lambda (x)
       (cond ((eq x 'atom) 't)
             ((eq x 'eq) 't)
             ((eq x 'car) 't)
             ((eq x 'cdr) 't)
             ((eq x 'cons) 't)
             (t '()))))
  (eval*
   . (lambda (exp env)
       (cond
         ((eq exp 't) 't)
         ((eq exp '()) '())
         ((atom exp) (assoc exp env))
         ((isSUBR (car exp))
          (apply* (car exp) (evlist (cdr exp) env) env))
         (t
          (apply* (car exp) (cdr exp) env)))))
  (apply*
   . (lambda (func args env)
       (cond
         ((and (atom func) (not (null func)))
          (cond
            ((eq func 'quote) (car args))
            ((eq func 'atom)  (cond ((atom (car args)) 't)
                                    (t '())))
            ((eq func 'eq)    (cond
                                ((eq (car args) (cadr args)) 't)
                                (t '())))
            ((eq func 'car)   (car (car args)))
            ((eq func 'cdr)   (cdr (car args)))
            ((eq func 'cons)  (cons (car args) (cadr args)))
            ((eq func 'cond)  (evcond args env))
            (t (eval* (cons (assoc func env) args) env))))
         ((eq (car func) 'label)
          (eval* (cons (caddr func) args)
                 (cons (cons (cadr func) (caddr func)) env)))
         ((eq (car func) 'lambda)
          (eval* (caddr func)
                 (append (assoclist (cadr func) (evlist args env))
                         env))))))
  (evcond
   . (lambda (clauses env)
       (cond ((null clauses) '())
             ((null (eval* (caar clauses) env))
              (evcond (cdr clauses) env))
             (t (eval* (cadar clauses) env)))))
  (evlist
   . (lambda (members env)
       (cond ((null members) '())
             (t (cons (eval* (car members) env)
                      (evlist (cdr members) env))))))
))

; Self-embeding
;
(def plisp (cons (cons 'plisp plisp) plisp))

; =====================================
;; Test 1
'Test_1

; ==> a
;
(eval 'x '((x . a) (y . b)))

;; ==> t
;
(eval '(eq 'a 'a) '())

; ==> (a b c)
;
(eval '(cons x '(b c)) '((x . a) (y . b)))

; ==> list
;
(eval '(cond ((atom x) 'atom)
              (t 'list))
       '((x '(a b))))

; ==> (a b c)
;
(eval '(f '(b c))
       '((f . (lambda (x) (cons 'a x)))))

; ==> a
;
(eval
 '((label firstatom
          (lambda (x)
            (cond ((atom x) x)
                  (t (firstatom (car x))))))
   y)
 '((y . ((a b) (c d)))))

; ==> (a c d)
;
(eval
 '((lambda (x y) (cons x (cdr y)))
   'a
   '(b c d))
 '())

; (subst 'm 'b '(a b (a b c) d)) => (a m (a m c) d)
;
(eval
 '((label subst
          (lambda (x y z)
            (cond ((atom z) (cond ((eq z y) x)
                                   (t z)))
                  (t (cons (subst x y (car z))
                            (subst x y (cdr z)))))))
   'm 'b '(a b (a b c) d))
 '())

; -------------------------------------
;; Test 2
; (Of course, these can be achieved much more efficiently by implementing 'eval*' calls within 'apply*'.)
'Test_2

; ==> a
;
(eval
 '(eval*
   '(eval* 'x '((x . a) (y . b)))
   plisp)
 plisp)

; ==> t
;
(eval
 '(eval*
   '(eval* '(eq 'a 'a) '())
   plisp)
 plisp)

; ==> (a b c)
;
(eval
 '(eval*
   '(eval* '(cons x '(b c)) '((x . a) (y . b)))
   plisp)
 plisp)

; ==> list
;
(eval
 '(eval*
   '(eval* '(cond ((atom x) 'atom)
                  (t 'list))
           '((x '(a b))))
   plisp)
 plisp)

; ==> (a b c)
;
(eval
 '(eval*
   '(eval* '(f '(b c))
           '((f . (lambda (x) (cons 'a x)))))
   plisp)
 plisp)

; ==> a
;
(eval
 '(eval*
   '(eval*
     '((label firstatom
              (lambda (x)
                (cond ((atom x) x)
                      (t (firstatom (car x))))))
       y)
     '((y . ((a b) (c d)))))
   plisp)
 plisp)

; ==> (a c d)
;
(eval
 '(eval*
   '(eval*
     '((lambda (x y) (cons x (cdr y)))
       'a
       '(b c d))
     '())
   plisp)
 plisp)

; (subst 'm 'b '(a b (a b c) d)) => (a m (a m c) d)
; *** It takes time! ***
;(eval
; '(eval*
;   '(eval*
;     '((label subst
;              (lambda (x y z)
;                (cond ((atom z) (cond ((eq z y) x)
;                                      (t z)))
;                      (t (cons (subst x y (car z))
;                               (subst x y (cdr z)))))))
;       'm 'b '(a b (a b c) d))
;     '())
;   plisp)
; plisp)

; -------------------------------------

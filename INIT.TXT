;;;;; An Initial Program for UrLISP ;;;;;;
;; Version 0.2.1
;; (C) 2025 Tsugu
;;;;;

; -------------------------------------
;; System Categories:
;  Dynamic Scope, Lisp-1

;; Supported Functions & Special Forms:
;  quote('), atom, eq, car, cdr, cons, cond, eval, apply, function(#'),
;  label, funarg, lambda

;; Unique Functions:
;  importenv, exportenv, def, cls, quit, error

; -------------------------------------
;; Usage

; "Super Brakets" '[' and ']'
'(a (b (c]          ; ==> (a (b (c)))
'(a [b (c] [b (c])  ; ==> (a (b (c)) (b (c)))

; 'importenv', 'exportenv'
(exportenv)             ; ==> ()
(importenv '((x . a)))  ; ==> ((x . a))
(exportenv)             ; ==> ((x . a))
x                       ; ==> a

; 'def'
(def y 'b)   ; ==> y
(exportenv)  ; ==> ((y . b) (x . a))
x            ; ==> a
y            ; ==> b

; Truth, False
(eq 'a 'a)  ; ==> t
(eq 'a 'b)  ; ==> ()

; Gabage Collection
(gc)

; Initializing of the environment list
(importenv '())

; Screen Clear
; (cls)

; Exit UrLISP
; (quit)

; -------------------------------------
;; Functions of Puseud Numbers (inefficient!)

(def +1
  '(lambda (x) (cons 't x)))

(def -1
  '(lambda (x)
     (cond ((eq #0 x) '())
           (t (cdr x)))))

(def +
  '(lambda (x y)
     (cond ((eq #0 y) x)
           (t (+ (+1 x) (-1 y))))))

(def *
  '(lambda (x y)
     ((label *rec
             (lambda (x y acc)
               (cond ((eq #0 y) acc)
                     (t (*rec x (-1 y) (+ acc x))))))
      x y '())))

(def -
  '(lambda (x y)
     (cond ((eq #0 y) x)
           (t (- (-1 x) (-1 y))))))

(def |-|
  '(lambda (x y)
     (+ (- x y) (- y x))))

(def =
  '(lambda (x y)
     (eq #0 (|-| x y))))

(def <
  '(lambda (x y)
     (cond ((- y x) 't))))

(def >
  '(lambda (x y)
     (cond ((- x y) 't))))

(def /
  '(lambda (x y)
     ((label /rec
             (lambda (x y acc)
               (cond ((< x y) acc)
                     (t (/rec (- x y) y (+1 acc))))))
      x y '())))

(def %
  '(lambda (x y)
     (cond ((< x y) x)
           ((= x y) #0)
           (t (% (- x y) y)))))

(def fibo
  '(lambda (n)
     ((label fibo-rec
             (lambda (n pre sum)
               (cond
                 ((eq #0 n) sum)
                 (t (fibo-rec (-1 n) sum (+ pre sum))))))
      n #1 #0)))

; =====================================
;; Meta-circular Evaluator

; A meta-circular pure LISP program 'plisp'
;
(def plisp
  '(
    (caar . (lambda (x) (car (car x))))
    (cadr . (lambda (x) (car (cdr x))))
    (cdar . (lambda (x) (cdr (car x))))
    (cddr . (lambda (x) (cdr (cdr x))))
    (caaar . (lambda (x) (car (caar x))))
    (caadr . (lambda (x) (car (cadr x))))
    (cadar . (lambda (x) (car (cdar x))))
    (caddr . (lambda (x) (car (cddr x))))
    (cdaar . (lambda (x) (cdr (caar x))))
    (cdadr . (lambda (x) (cdr (cadr x))))
    (cddar . (lambda (x) (cdr (cdar x))))
    (cdddr . (lambda (x) (cdr (cddr x))))
    (caddar . (lambda (x) (car (cddar x))))
    (list
     . (lambda x x))
    (null
     . (lambda (x) (eq x '())))
    (not
     . (lambda (x)
         (cond (x '()) (t 't))))
    (and
     . (lambda (x y)
         (cond (x y) (t '()))))
    (or
     . (lambda (x y)
         (cond (x 't) (t y))))
    (imply
     . (lambda (x y)
         (cond (x y) (t 't))))
    (rev-append
     . (lambda (x y)
         (cond ((null x) y)
               (t (rev-append (cdr x) (cons (car x) y))))))
    (reverse
     . (lambda (x) (rev-append x '())))
    (append
     . (lambda (x y) (rev-append (rev-append x '()) y)))
    (assoclist
     . (lambda (keys values)
         (cond ((or (null keys) (null values)) '())
               ((and (not (atom keys)) (not (atom values)))
                (cons (cons (car keys) (car values))
                      (assoclist (cdr keys) (cdr values))))
               ((not (null keys))
                (list (cons keys values))))))
    ; (error
    ;  . (lambda (err-code s-exp)
    ;      (Return a nil with outputing an error code and a S-expression.)))
    (assoc
     . (lambda (key lst)
         (cond ((null lst) (error '1 key))
               ((eq key (caar lst)) (cdar lst))
               (t (assoc key (cdr lst))))))
    (isSUBR
     . (lambda (x)
         (cond ((eq x 'atom) 't)
               ((eq x 'eq) 't)
               ((eq x 'car) 't)
               ((eq x 'cdr) 't)
               ((eq x 'cons) 't)
               ; ((eq x 'eval*) 't)  ; "bypass"
               ((eq x 'apply) 't)
               ((eq x 'error) 't)
               (t '()))))
    (evcond
     . (lambda (clauses env)
         (cond ((null clauses) '())
               ((null (eval* (caar clauses) env))
                (evcond (cdr clauses) env))
               (t (eval* (cadar clauses) env)))))
    (evlist
     . (lambda (members env)
         (cond ((null members) '())
               (t (cons (eval* (car members) env)
                        (evlist (cdr members) env))))))
    (apply*
     . (lambda (func args env)
         (cond
           ((and (atom func) (not (null func)))
            (cond
              ((eq func 'quote) (car args))
              ((eq func 'atom) (cond ((atom (car args)) 't)
                                     (t '())))
              ((eq func 'eq) (cond
                               ((eq (car args) (cadr args)) 't)
                               (t '())))
              ((eq func 'car) (car (car args)))
              ((eq func 'cdr) (cdr (car args)))
              ((eq func 'cons) (cons (car args) (cadr args)))
              ((eq func 'cond) (evcond args env))
              ; ((eq func 'eval*) (eval* (car args) (cadr args)))  ; "bypass"
              ((eq func 'apply) (apply* (car args) (cadr args) env))
              ((eq func 'function) (list 'funarg (car args) env))
              ((eq func 'funarg) (cons func args))
              ((eq func 'error) (error (car args) (cadr args)))
              (t (eval* (cons (assoc func env) args) env))))
           ((eq (car func) 'label)
            (eval* (cons (caddr func) args)
                   (cons (cons (cadr func) (caddr func)) env)))
           ((eq (car func) 'funarg)
            (apply* (cadr func) args (caddr func)))
           ((eq (car func) 'lambda)
            (eval* (caddr func)
                   (append (assoclist (cadr func) args) env)))
           (t (error '2 (cons func args))))))
    (eval*
     . (lambda (form env)
         (cond
           ((eq form 't) 't)
           ((eq form '()) '())
           ((atom form) (assoc form env))
           ((or (isSUBR (car form))
                (cond ((not (or (atom (car form)) (null (car form))))
                       (or (eq (caar form) 'funarg)
                           (eq (caar form) 'lambda)))))
            (apply* (car form) (evlist (cdr form) env) env))
           (t
            (apply* (car form) (cdr form) env)))))
    ))

; -------------------------------------
;; Compleat self-embeding

(def plisp-pair '(plisp))
(def plisp (cons plisp-pair plisp))
(cond ((rplacd plisp-pair plisp)))  ; 'cond' to avoid displaying circular lists

; Note! 'plisp' is now a circular list, so don't print it.

; -------------------------------------
;; "Pseudo interpretor" functions

; The global environment list '*env*'
;
(def *env* plisp)

; Add (x . y) to *env*.
;
(def <<
  '(lambda (x y)
     (cond
       ((cond
          ((rplacd plisp-pair (cons (cons x y) *env*))
           (def *env* (cons (cons x y) *env*))))  ; Note! Not reflected immediately.
        x))))

; Eval x on the environment list.
;
(def >> '(lambda (x) (eval x *env*)))

; Reset *env*.
;
(def reset!
  '(lambda ()
     (cond
       ((cond
          ((def *env* plisp)
           (rplacd plisp-pair plisp)))
        't))))

; -------------------------------------
; Z-combinator

(<< 'funcall
    '(lambda (f . x) (apply f x)))

(<< 'z-combi
    '(lambda (f)
       (funcall
        #'(lambda (y) (f #'(lambda x (apply (y y) x))))
        #'(lambda (y) (f #'(lambda x (apply (y y) x)))))))

; =====================================
;; Test 1
'Test_1

'Number_Test
'0 #0  '1 #1  '2 #2  '3 #3  '4 #4  '5 #5

'365_/_12_=_30
#=(/ #365 #12)

'365_%_12_=_5
#=(% #365 #12)

(gc)
'fibo_Test
#=(fibo #0)
#=(fibo #1)
#=(fibo #2)
#=(fibo #3)
#=(fibo #4)
#=(fibo #5)
#=(fibo #6)
#=(fibo #7)
#=(fibo #8)
#=(fibo #9)
#=(fibo #10)
#=(fibo #11)
#=(fibo #12)
#=(fibo #13)

; ---------------------------------------
;; Test 2
'Test_2

; Ex. 1
;
(<< 'reverse2
    '(lambda (x)
       ((label
         rec
         (lambda (x y)
           (cond ((null x) y)
                 (t (rec (cdr x) (cons (car x) y))))))
        x '())))
;
'reverse2
(>> '(reverse2 '(1 2 3 4 5 6 7 8 9 10)))
;
(<< 'reverse_z
    '(lambda (l)
       (funcall
        (z-combi
         #'(lambda (f)
             #'(lambda (l acc)
                 (cond
                   ((eq '() l) acc)
                   (t (f (cdr l)
                         (cons (car l) acc)))))))
        l '())))
;
'reverse_z
(>> '(reverse_z '(1 2 3 4 5 6 7 8 9 10)))
;
(<< 'list2 '(lambda x x))

; Ex. 2
;
(>> '(eval* '(eval* '(reverse_z '(a b c)) plisp) plisp))
(>> '(eval* '(eval* '(list2 'x 'y 'z) plisp) plisp))

; Ex. 3
;
(>> '(eval* '(eval* 'reverse_z plisp) plisp))
(reset!)
(>> '(eval* '(eval* 'reverse_z plisp) plisp))
(>> '(eval* '(eval* '(cddr '(a b c d)) plisp) plisp))